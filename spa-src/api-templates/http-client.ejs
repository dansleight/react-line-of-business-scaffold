<%
const { apiConfig, generateResponses, config } = it;
%>

export type QueryParamsType = Record<string | number, any>;
export type ResponseFormat = keyof Omit<Body, "body" | "bodyUsed">;

export interface FullRequestParams extends Omit<RequestInit, "body"> {
  /** set parameter to `true` for call `securityWorker` for this request */
  secure?: boolean;
  /** request path */
  path: string;
  /** content type of request body */
  type?: ContentType;
  /** query params */
  query?: QueryParamsType;
  /** format of response (i.e. response.json() -> format: "json") */
  format?: ResponseFormat;
  /** request body */
  body?: unknown;
  /** base url */
  baseUrl?: string;
  /** request cancellation token */
  cancelToken?: CancelToken;
}

interface ProcessedRequestParams {
  requestParams: RequestParams;
  responseFormat:
    | "text"
    | "arrayBuffer"
    | "blob"
    | "bytes"
    | "formData"
    | "json"
    | undefined;
}

export type RequestParams = Omit<
  FullRequestParams,
  "body" | "method" | "query" | "path"
>;

export interface ApiConfig<SecurityDataType = unknown> {
  baseUrl?: string;
  baseApiParams?: Omit<RequestParams, "baseUrl" | "cancelToken" | "signal">;
  securityWorker?: (
    securityData: SecurityDataType | null,
  ) => Promise<RequestParams | void> | RequestParams | void;
  customFetch?: typeof fetch;
  unhandledErrorHandler?: (message: string) => void;
}

export interface HttpResponse<D extends unknown, E extends unknown = unknown>
  extends Response {
  ref: string;
  data: D;
  error: E;
}

type CancelToken = Symbol | string | number;

export enum ContentType {
  Json = "application/json",
  FormData = "multipart/form-data",
  UrlEncoded = "application/x-www-form-urlencoded",
  Text = "text/plain",
}

export class HttpClient<SecurityDataType = unknown> {
  public baseUrl: string = "http://localhost:5041";
  private securityData: SecurityDataType | null = null;
  private securityWorker?: ApiConfig<SecurityDataType>["securityWorker"];
  private abortControllers = new Map<CancelToken, AbortController>();
  private customFetch = (...fetchParams: Parameters<typeof fetch>) =>
    fetch(...fetchParams);
  private errIdx: number = 1000;
  private unhandledErrorHandler?: (message: string) => void;

  private baseApiParams: RequestParams = {
    credentials: "same-origin",
    headers: {},
    redirect: "follow",
    referrerPolicy: "no-referrer",
  };

  constructor(apiConfig: ApiConfig<SecurityDataType> = {}) {
    Object.assign(this, apiConfig);
  }

  public setSecurityData = (data: SecurityDataType | null) => {
    this.securityData = data;
  };

  protected encodeQueryParam(key: string, value: any) {
    const encodedKey = encodeURIComponent(key);
    return `${encodedKey}=${encodeURIComponent(typeof value === "number" ? value : `${value}`)}`;
  }

  protected addQueryParam(query: QueryParamsType, key: string) {
    return this.encodeQueryParam(key, query[key]);
  }

  protected addArrayQueryParam(query: QueryParamsType, key: string) {
    const value = query[key];
    return value.map((v: any) => this.encodeQueryParam(key, v)).join("&");
  }

  protected toQueryString(rawQuery?: QueryParamsType): string {
    const query = rawQuery || {};
    const keys = Object.keys(query).filter(
      (key) => "undefined" !== typeof query[key],
    );
    return keys
      .map((key) =>
        Array.isArray(query[key])
          ? this.addArrayQueryParam(query, key)
          : this.addQueryParam(query, key),
      )
      .join("&");
  }

  protected addQueryParams(rawQuery?: QueryParamsType): string {
    const queryString = this.toQueryString(rawQuery);
    return queryString ? `?${queryString}` : "";
  }

  private contentFormatters: Record<ContentType, (input: any) => any> = {
    [ContentType.Json]: (input: any) =>
      input !== null && (typeof input === "object" || typeof input === "string")
        ? JSON.stringify(input)
        : input,
    [ContentType.Text]: (input: any) =>
      input !== null && typeof input !== "string"
        ? JSON.stringify(input)
        : input,
    [ContentType.FormData]: (input: any) =>
      Object.keys(input || {}).reduce((formData, key) => {
        const property = input[key];
        formData.append(
          key,
          property instanceof Blob
            ? property
            : typeof property === "object" && property !== null
              ? JSON.stringify(property)
              : `${property}`,
        );
        return formData;
      }, new FormData()),
    [ContentType.UrlEncoded]: (input: any) => this.toQueryString(input),
  };

  protected mergeRequestParams(
    params1: RequestParams,
    params2?: RequestParams,
  ): RequestParams {
    return {
      ...this.baseApiParams,
      ...params1,
      ...(params2 || {}),
      headers: {
        ...(this.baseApiParams.headers || {}),
        ...(params1.headers || {}),
        ...((params2 && params2.headers) || {}),
      },
    };
  }

  protected createAbortSignal = (
    cancelToken: CancelToken,
  ): AbortSignal | undefined => {
    if (this.abortControllers.has(cancelToken)) {
      const abortController = this.abortControllers.get(cancelToken);
      if (abortController) {
        return abortController.signal;
      }
      return void 0;
    }

    const abortController = new AbortController();
    this.abortControllers.set(cancelToken, abortController);
    return abortController.signal;
  };

  public abortRequest = (cancelToken: CancelToken) => {
    const abortController = this.abortControllers.get(cancelToken);

    if (abortController) {
      abortController.abort();
      this.abortControllers.delete(cancelToken);
    }
  };

  public getRequestParams = async (
    secure: boolean | undefined,
    params: any,
    format:
      | "text"
      | "arrayBuffer"
      | "blob"
      | "bytes"
      | "formData"
      | "json"
      | undefined
  ): Promise<ProcessedRequestParams> => {
    const secureParams =
      ((typeof secure === "boolean" ? secure : this.baseApiParams.secure) &&
        this.securityWorker &&
        (await this.securityWorker!(this.securityData))) ||
      {};
    const requestParams = this.mergeRequestParams(params, secureParams);
    const responseFormat = format || requestParams.format;
    return {
      requestParams: requestParams,
      responseFormat: responseFormat,
    } as ProcessedRequestParams;
  };

  public request = <T = any, E = any>({
    body,
    secure,
    path,
    type,
    query,
    format,
    baseUrl,
    cancelToken,
    ...params
<% if (config.unwrapResponseData) { %>
  }: FullRequestParams): ApiPromise<T> => {
<% } else { %>
  }: FullRequestParams): ApiPromise<T, E> => {
<% } %>
    return new ApiPromise<T, E>((resolve, reject) => {
      const queryString = query && this.toQueryString(query);
      const payloadFormatter = this.contentFormatters[type || ContentType.Json];

      // setting a unique error id and a listener for unhandled rejections
      const requestErrorId = `requestErr_${this.errIdx++}`;

      const promise = new ApiPromise<T, E>((resolve, reject) => {
        this.getRequestParams(secure, params, format).then(
          ({ requestParams, responseFormat }: ProcessedRequestParams) => {
            this.customFetch(
              `${baseUrl || this.baseUrl || ""}${path}${queryString ? `?${queryString}` : ""}`,
              {
                ...requestParams,
                headers: {
                  ...(requestParams.headers || {}),
                  ...(type && type !== ContentType.FormData
                    ? { "Content-Type": type }
                    : {}),
                },
                signal:
                  (cancelToken
                    ? this.createAbortSignal(cancelToken)
                    : requestParams.signal) || null,
                body:
                  typeof body === "undefined" || body === null
                    ? null
                    : payloadFormatter(body),
              },
            )
              .then(async (response) => {
                const r = response.clone() as HttpResponse<T, E>;
                r.ref = requestErrorId;
                r.data = null as unknown as T;
                r.error = null as unknown as E;

                const data = !responseFormat
                  ? r
                  : await response[responseFormat]()
                      .then((data) => {
                        if (r.ok) {
                          r.data = data;
                        } else {
                          r.error = data;
                        }
                        return r;
                      })
                      .catch((e) => {
                        r.error = e;
                        return r;
                      });

                if (cancelToken) {
                  this.abortControllers.delete(cancelToken);
                }

                if (!response.ok) reject(data);
<% if (config.unwrapResponseData) { %>
                resolve(data.data);
<% } else { %>
                resolve(data);
<% } %>
              })
              .catch((e) => {
                console.log("catch in fetch", e);
              });
          },
        );
      });
      const errHandler = (event: PromiseRejectionEvent) => {
        if (event?.reason?.ref && event.reason.ref == requestErrorId) {
          window.removeEventListener("unhandledrejection", errHandler);
          if (this.unhandledErrorHandler) {
            this.unhandledErrorHandler(event.reason);
            event.preventDefault();
          }
        }
      };
      window.addEventListener("unhandledrejection", errHandler);

      promise
        .then((res) => {
          window.removeEventListener("unhandledrejection", errHandler),
            resolve(res);
        })
        .catch((err) => reject(err));
    });
  };
}

export class ApiPromise<T, E> {
  private promise: Promise<HttpResponse<T, E>>;

  constructor(
    executor: (
      resolve: (value: HttpResponse<T, E>) => void,
      reject: (reason: HttpResponse<T, E>) => void,
    ) => void,
  ) {
    this.promise = new Promise(executor);
  }

  // Overload signatures for custom then
  then(
    onFulfilled: ((value: HttpResponse<T, E>) => any) | null,
    onRejected?: ((reason: any) => any) | null,
  ): ApiPromise<T, E>;
  then(
    onFulfilled?: undefined | null,
    onRejected?: ((reason: any) => any) | null,
  ): ApiPromise<T, E>;
  // Single implementation for custom then
  then(
    onFulfilled?: ((value: HttpResponse<T, E>) => any) | null,
    onRejected?: ((reason: any) => any) | null,
  ): ApiPromise<T, E> {
    return new ApiPromise<T, E>((resolve, reject) => {
      this.promise
        .then(
          onFulfilled
            ? (value) => {
                const result = onFulfilled(value);
                if (result instanceof Promise) {
                  result.then(resolve).catch(reject);
                } else {
                  resolve(result as HttpResponse<T, E>);
                }
              }
            : resolve,
          onRejected
            ? (reason) => {
                const result = onRejected(reason);
                if (result instanceof Promise) {
                  result.then(resolve).catch(reject);
                } else {
                  resolve(result as HttpResponse<T, E>);
                }
              }
            : reject,
        )
        .catch(reject);
    });
  }

  badRequest(
    onRejected: (reason: HttpResponse<T, E>) => void,
  ): ApiPromise<T, E> {
    return new ApiPromise<T, E>((resolve, reject) => {
      this.promise
        .catch((reason) => {
          if (reason.status === 400) {
            onRejected(reason);
            resolve({} as HttpResponse<T, E>);
          } else {
            reject(reason);
          }
        })
        .catch(reject);
    });
  }

  notFound(onRejected: (reason: HttpResponse<T, E>) => void): ApiPromise<T, E> {
    return new ApiPromise<T, E>((resolve, reject) => {
      this.promise
        .catch((reason) => {
          if (reason.status === 404) {
            onRejected(reason);
            resolve({} as HttpResponse<T, E>);
          } else {
            reject(reason);
          }
        })
        .catch(reject);
    });
  }

  catch(onRejected: (reason: any) => any): ApiPromise<T, E> {
    return new ApiPromise<T, E>((resolve, reject) => {
      this.promise
        .catch((reason) => {
          const result = onRejected(reason);
          if (result instanceof Promise) {
            result.then(resolve).catch(reject);
          } else {
            resolve(result);
          }
        })
        .catch(reject);
    });
  }

  finally(onFinally: () => void): ApiPromise<T, E> {
    return new ApiPromise<T, E>((resolve, reject) => {
      this.promise.finally(() => onFinally()).then(resolve, reject);
    });
  }

  toPromise(): Promise<HttpResponse<T, E>> {
    return this.promise;
  }
}

// Extend PromiseLike separately to avoid conflict
export interface ApiPromise<T, E> extends PromiseLike<HttpResponse<T, E>> {}
